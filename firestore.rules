rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    function isAdmin() {
      return hasRole('admin');
    }

    function isTreasurer() {
      return hasRole('treasurer');
    }

    function isEditor() {
      return hasRole('editor');
    }

    function isAdminOrTreasurer() {
      return isAdmin() || isTreasurer();
    }

    function canEdit() {
      return isAdmin() || isTreasurer() || isEditor();
    }

    // User profiles
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Never allow deletion
    }

    // User's private data (transactions, members, etc.)
    match /users/{userId}/{collection}/{document} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && canEdit();
      allow update: if isOwner(userId) && canEdit();
      allow delete: if isOwner(userId) && isAdminOrTreasurer();
    }

    // Nested subcollections
    match /users/{userId}/{collection}/{document}/{subcollection}/{subdoc} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // Announcements collection
    match /announcements/{announcementId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create/update/delete only for admins and editors
      allow create: if isAdmin() || isEditor();
      allow update: if isAdmin() || isEditor();
      allow delete: if isAdmin();
      
      // Additional validation for announcement data
      function isValidAnnouncement() {
        return request.resource.data.keys().hasAll([
          'title',
          'message',
          'audience',
          'priority',
          'status'
        ]) &&
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.title.size() <= 200 &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 0 &&
        request.resource.data.audience in ['all', 'members', 'specific'] &&
        request.resource.data.priority in ['low', 'medium', 'high'] &&
        request.resource.data.status in ['draft', 'published', 'archived'];
      }
      
      // Validate announcement data on create and update
      allow create: if isValidAnnouncement() && 
                   request.resource.data.createdBy == request.auth.uid &&
                   request.resource.data.createdAt == request.time;
                   
      allow update: if (
        // Existing data
        resource.data.createdBy == request.auth.uid || isAdmin()
      ) && (
        // Only allow certain fields to be updated
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['title', 'message', 'audience', 'priority', 'status', 'scheduledFor', 'updatedAt', 'updatedBy'])
      ) && (
        // Validate the updated data
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.title.size() <= 200 &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 0 &&
        request.resource.data.audience in ['all', 'members', 'specific'] &&
        request.resource.data.priority in ['low', 'medium', 'high'] &&
        request.resource.data.status in ['draft', 'published', 'archived'] &&
        request.resource.data.updatedAt == request.time
      );
    }
  }
}
