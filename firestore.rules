rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }

    function isAdmin() {
      return hasRole('admin');
    }

    function isTreasurer() {
      return hasRole('treasurer');
    }

    function isEditor() {
      return hasRole('editor');
    }

    function isAdminOrTreasurer() {
      return isAdmin() || isTreasurer();
    }

    function canEdit() {
      return isAdmin() || isTreasurer() || isEditor();
    }

    // User profiles
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Never allow deletion
    }

    // User's private data (transactions, members, etc.)
    match /users/{userId}/{collection}/{document} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && canEdit();
      allow update: if isOwner(userId) && canEdit();
      allow delete: if isOwner(userId) && isAdminOrTreasurer();
    }

    // Nested subcollections
    match /users/{userId}/{collection}/{document}/{subcollection}/{subdoc} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
  }
}
